// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: model/quiz.proto

package model

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type QuizState int32

const (
	QuizState_UNKNOWN_STATE QuizState = 0
	// QuizState NEW represents a quiz still in development, where no answer has been submitted yet.
	QuizState_NEW QuizState = 1
	// QuizState STARTED represents a quiz with at least one answer submitted.
	QuizState_STARTED QuizState = 2
	// QuizState ARCHIVED represents a quiz where the winners have been declared.
	QuizState_ARCHIVED QuizState = 3
)

// Enum value maps for QuizState.
var (
	QuizState_name = map[int32]string{
		0: "UNKNOWN_STATE",
		1: "NEW",
		2: "STARTED",
		3: "ARCHIVED",
	}
	QuizState_value = map[string]int32{
		"UNKNOWN_STATE": 0,
		"NEW":           1,
		"STARTED":       2,
		"ARCHIVED":      3,
	}
)

func (x QuizState) Enum() *QuizState {
	p := new(QuizState)
	*p = x
	return p
}

func (x QuizState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuizState) Descriptor() protoreflect.EnumDescriptor {
	return file_model_quiz_proto_enumTypes[0].Descriptor()
}

func (QuizState) Type() protoreflect.EnumType {
	return &file_model_quiz_proto_enumTypes[0]
}

func (x QuizState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QuizState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QuizState(num)
	return nil
}

// Deprecated: Use QuizState.Descriptor instead.
func (QuizState) EnumDescriptor() ([]byte, []int) {
	return file_model_quiz_proto_rawDescGZIP(), []int{0}
}

type AnswerType int32

const (
	AnswerType_UNKNOWN_ANSWER_TYPE    AnswerType = 0
	AnswerType_TEXT_ANSWER            AnswerType = 1
	AnswerType_INT64_ANSWER           AnswerType = 2
	AnswerType_FLOAT_ANSWER           AnswerType = 3
	AnswerType_BOOL_ANSWER            AnswerType = 4
	AnswerType_MULTIPLE_CHOICE_ANSWER AnswerType = 5
)

// Enum value maps for AnswerType.
var (
	AnswerType_name = map[int32]string{
		0: "UNKNOWN_ANSWER_TYPE",
		1: "TEXT_ANSWER",
		2: "INT64_ANSWER",
		3: "FLOAT_ANSWER",
		4: "BOOL_ANSWER",
		5: "MULTIPLE_CHOICE_ANSWER",
	}
	AnswerType_value = map[string]int32{
		"UNKNOWN_ANSWER_TYPE":    0,
		"TEXT_ANSWER":            1,
		"INT64_ANSWER":           2,
		"FLOAT_ANSWER":           3,
		"BOOL_ANSWER":            4,
		"MULTIPLE_CHOICE_ANSWER": 5,
	}
)

func (x AnswerType) Enum() *AnswerType {
	p := new(AnswerType)
	*p = x
	return p
}

func (x AnswerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnswerType) Descriptor() protoreflect.EnumDescriptor {
	return file_model_quiz_proto_enumTypes[1].Descriptor()
}

func (AnswerType) Type() protoreflect.EnumType {
	return &file_model_quiz_proto_enumTypes[1]
}

func (x AnswerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AnswerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AnswerType(num)
	return nil
}

// Deprecated: Use AnswerType.Descriptor instead.
func (AnswerType) EnumDescriptor() ([]byte, []int) {
	return file_model_quiz_proto_rawDescGZIP(), []int{1}
}

// A Quiz represents a single game with many questions, quizmasters, and participants.
type Quiz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	State *QuizState `protobuf:"varint,2,opt,name=state,enum=model.QuizState" json:"state,omitempty"`
	// What time we expect the quiz to start.
	ExpectedStartTime *int64 `protobuf:"varint,3,opt,name=expected_start_time,json=expectedStartTime" json:"expected_start_time,omitempty"`
	// What time the quiz actually started (the time of the first answer submission).
	ActualStartTime  *int64                `protobuf:"varint,4,opt,name=actual_start_time,json=actualStartTime" json:"actual_start_time,omitempty"`
	Title            *string               `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	HtmlDescription  *string               `protobuf:"bytes,6,opt,name=html_description,json=htmlDescription" json:"html_description,omitempty"`
	Questions        []*Question           `protobuf:"bytes,7,rep,name=questions" json:"questions,omitempty"`
	QuestionSequence []int64               `protobuf:"varint,11,rep,name=question_sequence,json=questionSequence" json:"question_sequence,omitempty"`
	Quizmasters      []*QuizmasterProfile  `protobuf:"bytes,9,rep,name=quizmasters" json:"quizmasters,omitempty"`
	Participants     []*ParticipantProfile `protobuf:"bytes,8,rep,name=participants" json:"participants,omitempty"`
	// During a live quiz, indicates the question ID that is currently being presented.
	LiveQuestionId *int64 `protobuf:"varint,10,opt,name=live_question_id,json=liveQuestionId" json:"live_question_id,omitempty"`
	// During a live quiz, indicates if the live question is currently accepting responses.
	AcceptingResponses *bool `protobuf:"varint,12,opt,name=accepting_responses,json=acceptingResponses" json:"accepting_responses,omitempty"`
}

func (x *Quiz) Reset() {
	*x = Quiz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_quiz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quiz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quiz) ProtoMessage() {}

func (x *Quiz) ProtoReflect() protoreflect.Message {
	mi := &file_model_quiz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quiz.ProtoReflect.Descriptor instead.
func (*Quiz) Descriptor() ([]byte, []int) {
	return file_model_quiz_proto_rawDescGZIP(), []int{0}
}

func (x *Quiz) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Quiz) GetState() QuizState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return QuizState_UNKNOWN_STATE
}

func (x *Quiz) GetExpectedStartTime() int64 {
	if x != nil && x.ExpectedStartTime != nil {
		return *x.ExpectedStartTime
	}
	return 0
}

func (x *Quiz) GetActualStartTime() int64 {
	if x != nil && x.ActualStartTime != nil {
		return *x.ActualStartTime
	}
	return 0
}

func (x *Quiz) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Quiz) GetHtmlDescription() string {
	if x != nil && x.HtmlDescription != nil {
		return *x.HtmlDescription
	}
	return ""
}

func (x *Quiz) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *Quiz) GetQuestionSequence() []int64 {
	if x != nil {
		return x.QuestionSequence
	}
	return nil
}

func (x *Quiz) GetQuizmasters() []*QuizmasterProfile {
	if x != nil {
		return x.Quizmasters
	}
	return nil
}

func (x *Quiz) GetParticipants() []*ParticipantProfile {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *Quiz) GetLiveQuestionId() int64 {
	if x != nil && x.LiveQuestionId != nil {
		return *x.LiveQuestionId
	}
	return 0
}

func (x *Quiz) GetAcceptingResponses() bool {
	if x != nil && x.AcceptingResponses != nil {
		return *x.AcceptingResponses
	}
	return false
}

// Quizmasters for a quiz identified by various IDs.
// At least one ID must be set. Equality checking will be done by
// the priority 1 field if set, otherwise will move on to the next priority.
type QuizmasterProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID as stored in the local database's primary key.
	// This will be set for the creator and guest users. Priority 2.
	UserId *int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// The google sub as set in the claim from OAuth. Set for
	// creators who logged in via Google. Priority 1.
	GoogleSub *string `protobuf:"bytes,2,opt,name=google_sub,json=googleSub" json:"google_sub,omitempty"`
	// The emial address as set in the claim from OAuth. Primarily
	// set when the QM invites other people to edit. Priority 3.
	GoogleEmail *string `protobuf:"bytes,3,opt,name=google_email,json=googleEmail" json:"google_email,omitempty"`
}

func (x *QuizmasterProfile) Reset() {
	*x = QuizmasterProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_quiz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizmasterProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizmasterProfile) ProtoMessage() {}

func (x *QuizmasterProfile) ProtoReflect() protoreflect.Message {
	mi := &file_model_quiz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizmasterProfile.ProtoReflect.Descriptor instead.
func (*QuizmasterProfile) Descriptor() ([]byte, []int) {
	return file_model_quiz_proto_rawDescGZIP(), []int{1}
}

func (x *QuizmasterProfile) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *QuizmasterProfile) GetGoogleSub() string {
	if x != nil && x.GoogleSub != nil {
		return *x.GoogleSub
	}
	return ""
}

func (x *QuizmasterProfile) GetGoogleEmail() string {
	if x != nil && x.GoogleEmail != nil {
		return *x.GoogleEmail
	}
	return ""
}

type ParticipantProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                *int64  `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ProfileName           *string `protobuf:"bytes,2,opt,name=profile_name,json=profileName" json:"profile_name,omitempty"`
	CompletedRegistration *bool   `protobuf:"varint,3,opt,name=completed_registration,json=completedRegistration" json:"completed_registration,omitempty"`
}

func (x *ParticipantProfile) Reset() {
	*x = ParticipantProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_quiz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantProfile) ProtoMessage() {}

func (x *ParticipantProfile) ProtoReflect() protoreflect.Message {
	mi := &file_model_quiz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantProfile.ProtoReflect.Descriptor instead.
func (*ParticipantProfile) Descriptor() ([]byte, []int) {
	return file_model_quiz_proto_rawDescGZIP(), []int{2}
}

func (x *ParticipantProfile) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *ParticipantProfile) GetProfileName() string {
	if x != nil && x.ProfileName != nil {
		return *x.ProfileName
	}
	return ""
}

func (x *ParticipantProfile) GetCompletedRegistration() bool {
	if x != nil && x.CompletedRegistration != nil {
		return *x.CompletedRegistration
	}
	return false
}

type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Which quiz this question is a part of.
	QuizId   *int64      `protobuf:"varint,2,opt,name=quiz_id,json=quizId" json:"quiz_id,omitempty"`
	Title    *string     `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	HtmlBody *string     `protobuf:"bytes,4,opt,name=html_body,json=htmlBody" json:"html_body,omitempty"`
	Type     *AnswerType `protobuf:"varint,5,opt,name=type,enum=model.AnswerType" json:"type,omitempty"`
	// Only valid if type = MULTIPLE_CHOICE_ANSWER
	Choices []*AnswerChoice `protobuf:"bytes,6,rep,name=choices" json:"choices,omitempty"`
	// Responses to this question by the participants
	Answers []*Answer `protobuf:"bytes,7,rep,name=answers" json:"answers,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_quiz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_model_quiz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_model_quiz_proto_rawDescGZIP(), []int{3}
}

func (x *Question) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Question) GetQuizId() int64 {
	if x != nil && x.QuizId != nil {
		return *x.QuizId
	}
	return 0
}

func (x *Question) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Question) GetHtmlBody() string {
	if x != nil && x.HtmlBody != nil {
		return *x.HtmlBody
	}
	return ""
}

func (x *Question) GetType() AnswerType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AnswerType_UNKNOWN_ANSWER_TYPE
}

func (x *Question) GetChoices() []*AnswerChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *Question) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type AnswerChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HtmlBody *string `protobuf:"bytes,1,opt,name=html_body,json=htmlBody" json:"html_body,omitempty"`
}

func (x *AnswerChoice) Reset() {
	*x = AnswerChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_quiz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerChoice) ProtoMessage() {}

func (x *AnswerChoice) ProtoReflect() protoreflect.Message {
	mi := &file_model_quiz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerChoice.ProtoReflect.Descriptor instead.
func (*AnswerChoice) Descriptor() ([]byte, []int) {
	return file_model_quiz_proto_rawDescGZIP(), []int{4}
}

func (x *AnswerChoice) GetHtmlBody() string {
	if x != nil && x.HtmlBody != nil {
		return *x.HtmlBody
	}
	return ""
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *int64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	QuestionId     *int64      `protobuf:"varint,2,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
	SolverId       *int64      `protobuf:"varint,3,opt,name=solver_id,json=solverId" json:"solver_id,omitempty"`
	Type           *AnswerType `protobuf:"varint,4,opt,name=type,enum=model.AnswerType" json:"type,omitempty"`
	AnsText        *string     `protobuf:"bytes,5,opt,name=ans_text,json=ansText" json:"ans_text,omitempty"`
	AnsInt         *int64      `protobuf:"varint,6,opt,name=ans_int,json=ansInt" json:"ans_int,omitempty"`
	AnsFloat       *float32    `protobuf:"fixed32,7,opt,name=ans_float,json=ansFloat" json:"ans_float,omitempty"`
	AnsBool        *bool       `protobuf:"varint,8,opt,name=ans_bool,json=ansBool" json:"ans_bool,omitempty"`
	AnsChoiceIndex *int64      `protobuf:"varint,9,opt,name=ans_choice_index,json=ansChoiceIndex" json:"ans_choice_index,omitempty"`
	ResponseTimeS  *int64      `protobuf:"varint,10,opt,name=response_time_s,json=responseTimeS" json:"response_time_s,omitempty"`
	PointsAwarded  *int64      `protobuf:"varint,11,opt,name=points_awarded,json=pointsAwarded" json:"points_awarded,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_quiz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_model_quiz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_model_quiz_proto_rawDescGZIP(), []int{5}
}

func (x *Answer) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Answer) GetQuestionId() int64 {
	if x != nil && x.QuestionId != nil {
		return *x.QuestionId
	}
	return 0
}

func (x *Answer) GetSolverId() int64 {
	if x != nil && x.SolverId != nil {
		return *x.SolverId
	}
	return 0
}

func (x *Answer) GetType() AnswerType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AnswerType_UNKNOWN_ANSWER_TYPE
}

func (x *Answer) GetAnsText() string {
	if x != nil && x.AnsText != nil {
		return *x.AnsText
	}
	return ""
}

func (x *Answer) GetAnsInt() int64 {
	if x != nil && x.AnsInt != nil {
		return *x.AnsInt
	}
	return 0
}

func (x *Answer) GetAnsFloat() float32 {
	if x != nil && x.AnsFloat != nil {
		return *x.AnsFloat
	}
	return 0
}

func (x *Answer) GetAnsBool() bool {
	if x != nil && x.AnsBool != nil {
		return *x.AnsBool
	}
	return false
}

func (x *Answer) GetAnsChoiceIndex() int64 {
	if x != nil && x.AnsChoiceIndex != nil {
		return *x.AnsChoiceIndex
	}
	return 0
}

func (x *Answer) GetResponseTimeS() int64 {
	if x != nil && x.ResponseTimeS != nil {
		return *x.ResponseTimeS
	}
	return 0
}

func (x *Answer) GetPointsAwarded() int64 {
	if x != nil && x.PointsAwarded != nil {
		return *x.PointsAwarded
	}
	return 0
}

var File_model_quiz_proto protoreflect.FileDescriptor

var file_model_quiz_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x8d, 0x04, 0x0a, 0x04, 0x51, 0x75,
	0x69, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x74, 0x6d, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x71, 0x75, 0x69, 0x7a, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x51, 0x75, 0x69, 0x7a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x0b, 0x71, 0x75, 0x69, 0x7a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x11, 0x51, 0x75, 0x69,
	0x7a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x16,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x25, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x2b, 0x0a, 0x0c, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x74, 0x6d, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x74, 0x6d, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xe2, 0x02, 0x0a, 0x06, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x73, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x6e, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x61, 0x6e, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6e, 0x73,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6e, 0x73,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x61, 0x6e, 0x73, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x2a, 0x42, 0x0a,
	0x09, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0x87, 0x01, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x4e, 0x53, 0x57,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e,
	0x54, 0x36, 0x34, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x1a, 0x0a, 0x16, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x05, 0x42, 0x10, 0x5a, 0x0e, 0x71,
	0x75, 0x69, 0x7a, 0x64, 0x72, 0x75, 0x6d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
}

var (
	file_model_quiz_proto_rawDescOnce sync.Once
	file_model_quiz_proto_rawDescData = file_model_quiz_proto_rawDesc
)

func file_model_quiz_proto_rawDescGZIP() []byte {
	file_model_quiz_proto_rawDescOnce.Do(func() {
		file_model_quiz_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_quiz_proto_rawDescData)
	})
	return file_model_quiz_proto_rawDescData
}

var file_model_quiz_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_model_quiz_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_model_quiz_proto_goTypes = []interface{}{
	(QuizState)(0),             // 0: model.QuizState
	(AnswerType)(0),            // 1: model.AnswerType
	(*Quiz)(nil),               // 2: model.Quiz
	(*QuizmasterProfile)(nil),  // 3: model.QuizmasterProfile
	(*ParticipantProfile)(nil), // 4: model.ParticipantProfile
	(*Question)(nil),           // 5: model.Question
	(*AnswerChoice)(nil),       // 6: model.AnswerChoice
	(*Answer)(nil),             // 7: model.Answer
}
var file_model_quiz_proto_depIdxs = []int32{
	0, // 0: model.Quiz.state:type_name -> model.QuizState
	5, // 1: model.Quiz.questions:type_name -> model.Question
	3, // 2: model.Quiz.quizmasters:type_name -> model.QuizmasterProfile
	4, // 3: model.Quiz.participants:type_name -> model.ParticipantProfile
	1, // 4: model.Question.type:type_name -> model.AnswerType
	6, // 5: model.Question.choices:type_name -> model.AnswerChoice
	7, // 6: model.Question.answers:type_name -> model.Answer
	1, // 7: model.Answer.type:type_name -> model.AnswerType
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_model_quiz_proto_init() }
func file_model_quiz_proto_init() {
	if File_model_quiz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_quiz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quiz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_quiz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizmasterProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_quiz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_quiz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_quiz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_quiz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_quiz_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_quiz_proto_goTypes,
		DependencyIndexes: file_model_quiz_proto_depIdxs,
		EnumInfos:         file_model_quiz_proto_enumTypes,
		MessageInfos:      file_model_quiz_proto_msgTypes,
	}.Build()
	File_model_quiz_proto = out.File
	file_model_quiz_proto_rawDesc = nil
	file_model_quiz_proto_goTypes = nil
	file_model_quiz_proto_depIdxs = nil
}
